<%= render partial: "layouts/title_panel", locals: { title: @document.name, edit_link: edit_document_path } %>

<div class="flex flex-row justify-center">
  <%= turbo_frame_tag "article_instances", class: "md:w-1/2 sm:w-2/3" do %>
    <%= render "article_instances", document: @document, paragraphs: @paragraphs, articles: @articles %>
  <% end %>
</div>

<script>
  function selectConfigs(data) {
    return {
      document_id: data.document_id,
      model: data.model,
      order: data.order,
      filter: '',
      show: false,
      selected: null,
      focusedOptionIndex: null,
      options: null,
      close() {
        this.show = false;
        this.focusedOptionIndex = this.selected ? this.focusedOptionIndex : null;
      },
      open() {
        this.show = true;
        this.filter = '';
      },
      isOpen() { return this.show === true },
      classOption(id, index) {
        const isSelected = this.selected ? (id == this.selected.id) : false;
        const isFocused = (index == this.focusedOptionIndex);
        return {
          'cursor-pointer w-full border-gray-100 border-b hover:bg-blue-50': true,
          'bg-blue-100': isSelected,
          'bg-blue-50': isFocused
        };
      },
      fetchOptions() {
        fetch(`/${this.model}/fetch.json`)
          .then(response => response.json())
          .then(data => this.options = data);
      },
      filteredOptions() {
        return this.options ? this.options.filter(option => { return (option.name.toLowerCase().indexOf(this.filter.toLowerCase()) > -1) }) : {}
      },
      onOptionClick(index) {
        this.focusedOptionIndex = index;
        this.selectOption();
      },
      selectOption() {
        if (!this.isOpen()) {
          return;
        }
        this.focusedOptionIndex = this.focusedOptionIndex ?? 0;
        const selected = this.filteredOptions()[this.focusedOptionIndex]
        if (this.selected && this.selected.id == selected.id) {
          this.filter = '';
          this.selected = null;
        }
        else {
          this.selected = selected;
          fetch(`/${this.model}/${selected.id}/create_instance?document_id=${this.document_id}&order=${this.order}`
          ).then(res => {
            Turbo.visit(`/documents/${this.document_id}`);
          });
        }
        this.close();
      },
      focusPrevOption() {
        if (!this.isOpen()) {
          return;
        }
        const optionsNum = Object.keys(this.filteredOptions()).length - 1;
        if (this.focusedOptionIndex > 0 && this.focusedOptionIndex <= optionsNum) {
          this.focusedOptionIndex--;
        }
        else if (this.focusedOptionIndex == 0) {
          this.focusedOptionIndex = optionsNum;
        }
      },
      focusNextOption() {
        const optionsNum = Object.keys(this.filteredOptions()).length - 1;
        if (!this.isOpen()) {
          this.open();
        }
        if (this.focusedOptionIndex == null || this.focusedOptionIndex == optionsNum) {
          this.focusedOptionIndex = 0;
        }
        else if (this.focusedOptionIndex >= 0 && this.focusedOptionIndex < optionsNum) {
          this.focusedOptionIndex++;
        }
      }
    }
  }
</script>
